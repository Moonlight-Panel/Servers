// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoonlightServers.ApiServer.Database;

#nullable disable

namespace MoonlightServers.ApiServer.Database.Migrations
{
    [DbContext(typeof(ServersContext))]
    partial class ServersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Servers")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int?>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("ServerId");

                    b.ToTable("Allocations", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Backup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Backups", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Networks", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiPort")
                        .HasColumnType("int");

                    b.Property<string>("Fqdn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("SslEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Nodes", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cpu")
                        .HasColumnType("int");

                    b.Property<int>("Disk")
                        .HasColumnType("int");

                    b.Property<int>("DockerImageIndex")
                        .HasColumnType("int");

                    b.Property<int>("Memory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<string>("OverrideDockerImage")
                        .HasColumnType("longtext");

                    b.Property<string>("OverrideStartupCommand")
                        .HasColumnType("longtext");

                    b.Property<int>("StarId")
                        .HasColumnType("int");

                    b.Property<bool>("VirtualDiskEnabled")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.HasIndex("NodeId");

                    b.HasIndex("StarId");

                    b.ToTable("Servers", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.ServerVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerVariables", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Star", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowDockerImageChanging")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DefaultDockerImageIndex")
                        .HasColumnType("int");

                    b.Property<string>("DonationUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("InstallDockerImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InstallScript")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InstallShell")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OnlineDetection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParseConfiguration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredAllocations")
                        .HasColumnType("int");

                    b.Property<string>("StartupCommand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StopCommand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdateUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Stars", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.StarDockerImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoPulling")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StarId");

                    b.ToTable("StarDockerImages", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.StarFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StarFolders", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.StarVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowViewing")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Filter")
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StarId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StarId");

                    b.ToTable("StarVariables", "Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Allocation", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Node", "Node")
                        .WithMany("Allocations")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Server", "Server")
                        .WithMany("Allocations")
                        .HasForeignKey("ServerId");

                    b.Navigation("Node");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Backup", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Server", "Server")
                        .WithMany("Backups")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Network", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Server", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Network", "Network")
                        .WithMany("Servers")
                        .HasForeignKey("NetworkId");

                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Node", "Node")
                        .WithMany("Servers")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Star", "Star")
                        .WithMany()
                        .HasForeignKey("StarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Node");

                    b.Navigation("Star");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.ServerVariable", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Server", "Server")
                        .WithMany("Variables")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Star", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.StarFolder", "Folder")
                        .WithMany("Stars")
                        .HasForeignKey("FolderId");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.StarDockerImage", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Star", null)
                        .WithMany("DockerImages")
                        .HasForeignKey("StarId");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.StarVariable", b =>
                {
                    b.HasOne("MoonlightServers.ApiServer.Database.Entities.Star", null)
                        .WithMany("Variables")
                        .HasForeignKey("StarId");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Network", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Node", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Server", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Backups");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.Star", b =>
                {
                    b.Navigation("DockerImages");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("MoonlightServers.ApiServer.Database.Entities.StarFolder", b =>
                {
                    b.Navigation("Stars");
                });
#pragma warning restore 612, 618
        }
    }
}
